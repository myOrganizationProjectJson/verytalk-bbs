<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=$charset">
<meta http-equiv="x-ua-compatible" content="ie=7" />
<link href="static/image/admincp/admincp.css?{$_G[style][verhash]}" rel="stylesheet" type="text/css" />
</head>
<body>
<script type="text/JavaScript">
var admincpfilename = '{$basescript}', IMGDIR = '{$IMGDIR}', STYLEID = '{$STYLEID}', VERHASH = '{$VERHASH}', IN_ADMINCP = true, ISFRAME = $frame, STATICURL='static/', SITEURL = '{$_G[siteurl]}', JSPATH = '{$_G[setting][jspath]}';
</script>
<script src="{$_G[setting][jspath]}common.js?{$_G[style][verhash]}" type="text/javascript"></script>
<script src="{$_G[setting][jspath]}admincp.js?{$_G[style][verhash]}" type="text/javascript"></script>
<div id="append_parent"></div><div id="ajaxwaitid"></div>
<div class="container" id="cpcontainer"><script src="static/js/calendar.js" type="text/javascript"></script><script type="text/javascript" language="javascript" src="source/plugin/chaoji_com/resource/js/jquery.min.js"></script>
<script src="source/plugin/chaoji_com/resource/js/artDialog/artDialog.js?skin=default"></script>
<script src="source/plugin/chaoji_com/resource/js/artDialog/plugins/iframeTools.js"></script>
<script type="text/javascript">var jq = jQuery.noConflict();var disallowfloat = false;</script>
<script type="text/javascript" src="source/plugin/chaoji_com/resource/js/highcharts.js" language="javascript"></script>
<script type="text/javascript" src="source/plugin/chaoji_com/resource/js/tableorder.js" language="javascript"></script>
<script src="source/plugin/chaoji_com/resource/js/template-native.js" type="text/javascript"></script>
<link href="source/plugin/chaoji_com/resource/css/style.css?{TIMESTAMP}" rel="stylesheet" type="text/css" />
<script type="text/javascript" language="javascript" src="source/plugin/chaoji_com/resource/js/script.js?{TIMESTAMP}"></script>
<script type="text/javascript" language="javascript" src="source/plugin/chaoji_com/resource/js/jquery.validate.min.js"></script>
<style type="text/css">
.container{padding:0px!important;}	
</style>
<div class="dialog">
<div class="dialog-content">
    <form name="editkeywordform" action="{CJ_PLUGIN_URL}pmod=setting&op=edit_keywords" method="post" id="editkeywordform" enctype="multipart/form-data">
	<input type="hidden" name="formhash" value="{FORMHASH}" />
	<input type="hidden" name="datatype" value="{$datatype}" />
	<input type="hidden" name="returnurl" value="{$returnurl}" />
	<div id="result"></div>
	<!--{if $errmsg}--><div class="dialogmsg dialogmsg-error">{$errmsg}</div><!--{/if}-->
         <div class="dbody">
        <div class="form form-compact">
            <div class="row">
                <label class="label" for="title">{lang chaoji_com:monitor-sites}:</label>
                <div class="enter"><input type="hidden" name="websitename" value="{$websitename}" />
                   {$websitename} | {$host}
                </div>
            </div>
            <div class="row" style="margin-bottom:0;">
                <label class="label">{lang chaoji_com:keyword}:</label>
                <div class="enter">
                    <div style="margin-bottom: 5px;" class="gray">
                        <span class="extra">{lang chaoji_com:you-can-left} <strong id="hasaddkwnum" class="red">{$jsondata['keywordcount']}</strong> {lang chaoji_com:you-can-right}</span>
                     </div>
                    <div class="note">
                    <span class="red">{lang chaoji_com:multiword}</span>
                    </div>
                    <div id="div_keywords"><textarea name="keywords" id="editkeywords" style="width: 290px;">{$keywords}</textarea></div>
                     <div class="extra">
                      <p>
                      <a class="underline" id="GetKeyWords" href="javascript:void(0);">{lang chaoji_com:set-from}</a>
                      </p>
                     </div>
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix dialogfoot">
        <input id="websiteHost" name="websiteHost" type="hidden"  value="{$host}"/>
        <input type="hidden" name="userwebsiteid" value="{$userwebsiteid}" />
        <span class="btnwrap btnpositive"><input class="inner" id="submitbtn" type="submit" name="save" value="{lang chaoji_com:save}" /></span>
        <span class="btnwrap"><input class="inner" type="button" onclick="art.dialog.close();" value="{lang chaoji_com:cancel}" /></span>
    </div>
    </form>
</div>
</div>
<script type="text/javascript" language="javascript">
Array.prototype.Distinct = function () {
    var str = [];
    for (var i = 0, len = this.length; i < len; i++) {

        if ((!RegExp("," + this[i] + ",|^" + this[i] + ",|," + this[i] + "$", "g").test(str.join(","))) && str.length > 1) { str.push(this[i]); }
        else {
            if (str.length <= 1) {
                if (!RegExp("^" + this[i] + "$", "g").test(str.join(","))) {
                    str.push(this[i]);
                }
            }
        }
    }
    return str;
}
Array.prototype.Del = function (data) {
    var index = -1;
    for (var i = 0, len = this.length; i < len; i++) {
        if (this[i] === data) {
            index = i;
            break;
        }
    }
    if (index != -1) {
        this.splice(index, 1);
    }
    return this;
}
var LoadingImagePath = "source/plugin/chaoji_com/resource/images/smallloading.gif";
function KeywordsEditPageInit(keywordSurplusCount) {
    var LoadingShower = "<p id='LoadingShower'>\<img src='" + LoadingImagePath + "' alt=''></p>";
    var KeywordActivor = checkKeyword(jq("#div_keywords").find("textarea"), keywordSurplusCount);
    jq("#GetKeyWords").bind("click", function () {
		var p = art.dialog.open.api;
		var oldwidth = p.iframe.clientWidth;
		var oldheight = p.iframe.clientHeight;
		p.size(oldwidth, oldheight + 20);
        var data = {};
        data.host = jq("#websiteHost").val();
        var Current = this;
        var ajaxParms = {
            url: "{CJ_PLUGIN_URL}pmod=setting&op=data&act=getkeywords&formhash={FORMHASH}",
            type: "get",
            dataType: "json",
            data: data,
            beforeSend: function () {
                jq(Current).parent().siblings().remove();
                jq(Current).parent().after(LoadingShower);
            },
            success: function (ret) {
                jq("#LoadingShower").remove();
                var html = "";
                if (ret.success) {
                    KeywordActivor.SetContent(ret.result, jq("#editkeywords"));
                    jq("#GetKeyWords").unbind("click");
                }
                else {
                    //获取失败
                    html = "<p style='color:red'>" + ret.msg + "</p>";
                    jq(Current).parent().after(html);
                }
				p.size(oldwidth, oldheight);
            }
        };

        jq.ajax(ajaxParms);
        return false;
    });
}
/*focusFunc,blurFunc为方法参数，其中focusFunc，当文本框获得焦点执行，当文本框失去焦点执行blurFunc，参数为当前文本框*/
function checkKeyword(m_Activtors, m_total, focusFunc, blurFunc, NeedInitCurrentTotal) {
    var KeywordActive = {
        CountLimit: 0,
        CurrentTotal: 0,
        Activtors: {},
        KeywordReg: /(\+)+|(\?)+|(\")+|(\“)+|(\”)+/g,
        Init: function (m_total, m_Activtors) {
            this.CountLimit = m_total;
            this.Activtors = m_Activtors;
            if (NeedInitCurrentTotal != undefined && (typeof NeedInitCurrentTotal == "boolean") && NeedInitCurrentTotal) {
                this.Activtors.each(function () {
                    var value = jq(this).val();
                    var kwArray = value.split(",");
                    var num = 0;
                    for (var i = 0; i < kwArray.length; i++) {
                        if (jq.trim(kwArray[i]) != "") {
                            num += 1;
                        }
                    }
                    KeywordActive.CurrentTotal += num;
                });
                var hasaddnum = KeywordActive.CountLimit - KeywordActive.CurrentTotal;
                jq("ul.list").find("span.red").text(hasaddnum);
                jq("#hasaddkwnum").text(hasaddnum);
                jq("#keywordlimit").text(hasaddnum);
            }
            this.BindEvent();
        },
        CurrentActivetorCountBefore: 0, //当前编辑文本框在编辑前已存在关键词个数
        BindEvent: function () {
            this.Activtors.bind("focus", function () {
                var placeholder = jq(this).attr('placeholder');
                var value = this.value;
                var kwArray = value.split(",");
                var num = 0;
                for (var i = 0; i < kwArray.length; i++) {
                    if (placeholder != undefined && placeholder != "") {
                        if (jq.trim(kwArray[i]) != "" && jq.trim(kwArray[i]) != placeholder) {
                            num += 1;
                        }
                    }
                    else {
                        if (jq.trim(kwArray[i]) != "") {
                            num += 1;
                        }
                    }
                }
                KeywordActive.CurrentActivetorCountBefore = num;
                if (focusFunc != undefined && typeof focusFunc == "function") {
                    focusFunc(this);
                }
            });
            this.Activtors.bind("blur", function () {
                var placeholder = jq(this).attr('placeholder');
                var placeholderTag = (placeholder != undefined && placeholder != "");
                KeywordActive.CurrentTotal = KeywordActive.CurrentTotal - KeywordActive.CurrentActivetorCountBefore;
                if (this.value.indexOf('，') > -1) {
                    this.value = this.value.replace(/，/g, ',');
                }
                var kwArray = this.value.split(",");
                kwArray = kwArray.Distinct(); //去重
                var num = 0;
                for (var i = 0; i < kwArray.length; i++) {

                    if (placeholderTag) {
                        if (jq.trim(kwArray[i]) != "" && jq.trim(kwArray[i]) != placeholder) {
                            var kwlength = kwArray[i].length;
                            if (kwlength > 20) {
                                var kwindex = this.value.indexOf(kwArray[i]);
                                this.value = this.value.substring(0, kwindex) + this.value.substring(kwindex, kwindex + 20) + this.value.substring(kwindex + kwlength, this.value.length);
                            }

                            num += 1;

                        }
                        //去除空格
                        else {
                            kwArray.Del(kwArray[i]);
                        }
                    }
                    else {
                        if (jq.trim(kwArray[i]) != "") {
                            var kwlength = kwArray[i].length;
                            if (kwlength > 20) {
                                var kwindex = this.value.indexOf(kwArray[i]);
                                this.value = this.value.substring(0, kwindex) + this.value.substring(kwindex, kwindex + 20) + this.value.substring(kwindex + kwlength, this.value.length);
                            }

                            num += 1;

                        }
                        //去除空格
                        else {
                            kwArray.Del(kwArray[i]);
                        }
                    }
                }
                if ((num + KeywordActive.CurrentTotal == KeywordActive.CountLimit + 1) || num + KeywordActive.CurrentTotal == KeywordActive.CountLimit && (this.value.lastIndexOf(',') == this.value.length - 1)) {
                    var lastIndex = this.value.lastIndexOf(',');
                    this.value = this.value.substring(0, lastIndex - 1);
                }
                this.value = kwArray.join(",");
                this.value = this.value.replace(KeywordActive.KeywordReg, "");
                if (this.value != "") {
                    kwArray = this.value.split(",");
                    if (placeholder != undefined && placeholder != "") {
                        for (var i = 0; i < kwArray.length; i++) {
                        }
                    }
                    num = kwArray.length;

                    while (num > KeywordActive.CountLimit - KeywordActive.CurrentTotal) {
                        kwArray.pop();
                        num--;
                    }
                    this.value = kwArray.join(",");

                    KeywordActive.CurrentActivetorCountBefore = num;
                    KeywordActive.CurrentTotal += num;
                }
                else {
                    if (placeholderTag) {
                        this.value = placeholder;
                    }
                }
                var hasaddnum = KeywordActive.CountLimit - KeywordActive.CurrentTotal;
                jq("ul.list").find("span.red").text(hasaddnum);
                jq("#hasaddkwnum").text(hasaddnum);
                jq("#keywordlimit").text(hasaddnum);
                if (blurFunc != undefined && typeof blurFunc == "function") {
                    blurFunc(this);
                }
            });
            this.Activtors.bind("keyup", function () {
                KeywordActive.CurrentTotal = KeywordActive.CurrentTotal - KeywordActive.CurrentActivetorCountBefore;
                if (this.value.indexOf('，') > -1) {
                    this.value = this.value.replace(/，/g, ',');
                }
                this.value = this.value.replace(KeywordActive.KeywordReg, "");
                var kwArray = this.value.split(",");
                this.value = kwArray.join(",");
                var num = 0;
                for (var i = 0; i < kwArray.length; i++) {

                    if (jq.trim(kwArray[i]) != "") {
                        var kwlength = kwArray[i].length;
                        if (kwlength > 20) {
                            var kwindex = this.value.indexOf(kwArray[i]);
                            this.value = this.value.substring(0, kwindex) + this.value.substring(kwindex, kwindex + 20) + this.value.substring(kwindex + kwlength, this.value.length);
                        }

                        num += 1;

                    }
                }
                if ((num + KeywordActive.CurrentTotal == KeywordActive.CountLimit + 1) || num + KeywordActive.CurrentTotal == KeywordActive.CountLimit && (this.value.lastIndexOf(',') == this.value.length - 1)) {
                    var lastIndex = this.value.lastIndexOf(',');
                    this.value = this.value.substring(0, lastIndex);
                }
                kwArray = this.value.split(",");
                num = 0;
                for (var i = 0; i < kwArray.length; i++) {
                    if (jq.trim(kwArray[i]) != "") {
                        num += 1;
                    }
                }
                KeywordActive.CurrentActivetorCountBefore = num;
                KeywordActive.CurrentTotal += num;
                var hasaddnum = KeywordActive.CountLimit - KeywordActive.CurrentTotal;
                jq("ul.list").find("span.red").text(hasaddnum);
                jq("#hasaddkwnum").text(hasaddnum);
                jq("#keywordlimit").text(hasaddnum);
            });
        },
        SetContent: function (content, container) {
            var oldvalue = "";
            if (container != undefined) {
                oldvalue = jq(container).val();
            }
            else {
                if (this.Activtors.length < 1) {
                    return;
                }
                oldvalue = this.Activtors.eq(0).val();
            }
            if (content.indexOf("，") > -1 || content.indexOf("、") > -1) {
                content = content.replace(/\，/g, ',').replace(/\、/g, ",");
            }
            content = content.replace(KeywordActive.KeywordReg, "");
			
            oldvalue = jq.trim(oldvalue);
			
            var oldArray = oldvalue.split(',');
            var oldLength = oldvalue == "" ? 0 : oldArray.length; //原本的个数
            var ArrayContent = content.split(",");
            ArrayContent = ArrayContent.Distinct(); //去重
            var residuecount = this.CountLimit - this.CurrentTotal; //当前剩余可添加的关键词
            var setCount = 0;
            /*过滤空的关键词跟超过20字符的关键词*/
            for (var i = 0, count = ArrayContent.length; i < count && setCount < residuecount; i++) {
                var arrayContent = jq.trim(ArrayContent[i]);
                if (arrayContent != "") {
                    var kwlength = arrayContent.length;
                    if (kwlength > 20) {
                        ArrayContent.Del(arrayContent);
                    }
                    else {
                        if (!oldArray.Contain(arrayContent)) {
                            if (oldvalue == "") {
                                oldvalue = arrayContent;
                            }
                            else {
                                oldvalue += "," + arrayContent;
                            }
                            setCount++;
                        }

                    }
                }
            }
			
            var newArray = oldvalue.split(',').Distinct();
            var newLength = newArray.length; //添加后的个数
            this.CurrentTotal = this.CurrentTotal - oldLength + newLength;
            oldvalue = newArray.join(',');
            if (container != undefined) {
                jq(container).val(oldvalue);
            }
            else {
                this.Activtors.eq(0).val(oldvalue);
            }

            var hasaddnum = this.CountLimit - this.CurrentTotal;
            jq("ul.list").find("span.red").text(hasaddnum);
            jq("#hasaddkwnum").text(hasaddnum);
            jq("#keywordlimit").text(hasaddnum);
        }
    };
    KeywordActive.Init(m_total, m_Activtors, NeedInitCurrentTotal);
    return KeywordActive;
}


Array.prototype.Contain = function (text) {
    var result = false
    var whereReg = new RegExp("^" + text + "$");
    for (var i = 0, len = this.length; i < len; i++) {
        if (whereReg.test(this[i])) {
            result = true;
            break;
        }
    }
    return result;
}

jq(function(){
	KeywordsEditPageInit({$jsondata['keywordcount']});
});
</script>
</div>
</body>
</html>